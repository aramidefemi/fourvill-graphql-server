type Query  { 
   users: [User],
   login(params: UserLogin!): Login 
   userById(id:ID!):User
   unlockToken (token: String): User
}

type Mutation {
   createUser(params: UserRegistraion!): Response
}

 

type Login  {
   user: User,
   token: String,
   status: Boolean!,
}
type User {
  _id:String
  email: String,
  userName: String,
  fullName: String,
  password: String,
  profilePicture: String,
  timezone: String,
  authrnticationType: String,
  availability: Boolean, 
  workspaceUrls: [String],
  businessType: String,
  role: [String],
  createdAt: String,
  updatedAt: String,
}

type Response {
   status: Boolean!,
   message: String,
}

input UserLogin {
   email: String!,
   password: String
}
input UserRegistraion {
  email: String!,
  userName: String!,
  fullName: String,
  password: String!,
#   profilePicture: String,
  timezone: String,
  authenticationType: String,
  availability: Boolean, 
  workspaceUrls: [String],
  businessType: String,
  role: [String]
}